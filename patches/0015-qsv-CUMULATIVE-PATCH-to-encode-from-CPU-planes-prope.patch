From 5c47e153f40d5d4b65a7a4c21d3c1d02e3155b5d Mon Sep 17 00:00:00 2001
From: Steve Lhomme <robux4@videolabs.io>
Date: Thu, 31 Aug 2017 18:02:31 +0200
Subject: [PATCH] qsv: CUMULATIVE PATCH to encode from CPU planes properly

---
 modules/codec/Makefile.am |   2 +-
 modules/codec/qsv.c       | 452 ++++++++++++++++++++++++--------------
 2 files changed, 293 insertions(+), 161 deletions(-)

diff --git a/modules/codec/Makefile.am b/modules/codec/Makefile.am
index 1c0227635a..06cfdf68fa 100644
--- a/modules/codec/Makefile.am
+++ b/modules/codec/Makefile.am
@@ -603,7 +603,7 @@ libcrystalhd_plugin_la_LIBADD = $(LIBS_crystalhd)
 EXTRA_LTLIBRARIES += libcrystalhd_plugin.la
 codec_LTLIBRARIES += $(LTLIBcrystalhd)
 
-libqsv_plugin_la_SOURCES = codec/qsv.c
+libqsv_plugin_la_SOURCES = codec/qsv.c codec/vlc_fifo_helper.h
 libqsv_plugin_la_CFLAGS = $(AM_CFLAGS) $(MFX_CFLAGS)
 libqsv_plugin_la_LDFLAGS = $(AM_LDFLAGS) -rpath '$(codecdir)'
 libqsv_plugin_la_LIBADD = $(MFX_LIBS)
diff --git a/modules/codec/qsv.c b/modules/codec/qsv.c
index 9c0841c87d..598e1ebf35 100644
--- a/modules/codec/qsv.c
+++ b/modules/codec/qsv.c
@@ -32,15 +32,20 @@
 #include <vlc_plugin.h>
 #include <vlc_picture.h>
 #include <vlc_codec.h>
+#include <vlc_picture_pool.h>
+
+#include <vlc_fifo_helper.h>
 
 #include <mfx/mfxvideo.h>
 
 #define SOUT_CFG_PREFIX     "sout-qsv-"
 
-/* Default wait on Intel Media SDK SyncOperation. Almost useless when async-depth >= 2 */
-#define QSV_SYNCPOINT_WAIT  (420)
+#define QSV_HAVE_CO2 (MFX_VERSION_MAJOR > 1 || (MFX_VERSION_MAJOR == 1 && MFX_VERSION_MINOR >= 6))
+
+/* Default wait on libavcodec */
+#define QSV_SYNCPOINT_WAIT  (1000)
 /* Encoder input synchronization busy wait loop time */
-#define QSV_BUSYWAIT_TIME   (10000)
+#define QSV_BUSYWAIT_TIME   VLC_HARD_MIN_SLEEP
 /* The SDK doesn't have a default bitrate, so here's one. */
 #define QSV_BITRATE_DEFAULT (842)
 
@@ -151,37 +156,41 @@ static void     Close(vlc_object_t *);
      "numbers may result on better throughput depending on hardware. " \
      "MPEG2 needs at least 1 here.")
 
-static const int const profile_h264_list[] =
-      { 0, MFX_PROFILE_AVC_BASELINE, MFX_PROFILE_AVC_MAIN,
+static const int profile_h264_list[] =
+      { MFX_PROFILE_UNKNOWN, MFX_PROFILE_AVC_CONSTRAINED_BASELINE, MFX_PROFILE_AVC_MAIN,
       MFX_PROFILE_AVC_EXTENDED, MFX_PROFILE_AVC_HIGH };
 static const char *const profile_h264_text[] =
     { "decide", "baseline", "main", "extended", "high" };
 
-static const int const profile_mpeg2_list[] =
-    { 0, MFX_PROFILE_MPEG2_SIMPLE, MFX_PROFILE_MPEG2_MAIN,
+static const int profile_mpeg2_list[] =
+    { MFX_PROFILE_UNKNOWN, MFX_PROFILE_MPEG2_SIMPLE, MFX_PROFILE_MPEG2_MAIN,
       MFX_PROFILE_MPEG2_HIGH };
 static const char *const profile_mpeg2_text[] =
     { "decide", "simple", "main", "high" };
 
-static const int const level_h264_list[] =
-    { 0, 10, 9, 12, 13, 20, 21, 22, 30, 31, 32, 40, 41,   42,   50, 51, 52};
+static const int level_h264_list[] =
+    { MFX_LEVEL_UNKNOWN, MFX_LEVEL_AVC_1, MFX_LEVEL_AVC_1b, MFX_LEVEL_AVC_12,
+      MFX_LEVEL_AVC_13, MFX_LEVEL_AVC_2, MFX_LEVEL_AVC_21, MFX_LEVEL_AVC_22,
+      MFX_LEVEL_AVC_3, MFX_LEVEL_AVC_31, MFX_LEVEL_AVC_32, MFX_LEVEL_AVC_4,
+      MFX_LEVEL_AVC_41, MFX_LEVEL_AVC_42, MFX_LEVEL_AVC_5, MFX_LEVEL_AVC_51,
+      MFX_LEVEL_AVC_52};
 static const char *const level_h264_text[] =
     { "decide", "1", "1.1b", "1.2", "1.3", "2", "2.1", "2.2", "3", "3.1",
       "3.2", "4", "4.1",   "4.2",   "5", "5.1", "5.2" };
 
-static const int const level_mpeg2_list[] =
-    { 0, MFX_LEVEL_MPEG2_LOW, MFX_LEVEL_MPEG2_MAIN,
+static const int level_mpeg2_list[] =
+    { MFX_LEVEL_UNKNOWN, MFX_LEVEL_MPEG2_LOW, MFX_LEVEL_MPEG2_MAIN,
       MFX_LEVEL_MPEG2_HIGH, MFX_LEVEL_MPEG2_HIGH1440 };
 static const char *const level_mpeg2_text[] =
     { "decide", "low", "main", "high", "high1440" };
 
-static const int const target_usage_list[] =
-    { 0, MFX_TARGETUSAGE_BEST_QUALITY, MFX_TARGETUSAGE_BALANCED,
+static const int target_usage_list[] =
+    { MFX_TARGETUSAGE_UNKNOWN, MFX_TARGETUSAGE_BEST_QUALITY, MFX_TARGETUSAGE_BALANCED,
       MFX_TARGETUSAGE_BEST_SPEED };
 static const char *const target_usage_text[] =
     { "decide", "quality", "balanced", "speed" };
 
-static const int const rc_method_list[] =
+static const int rc_method_list[] =
     { MFX_RATECONTROL_CBR, MFX_RATECONTROL_VBR,
       MFX_RATECONTROL_CQP, MFX_RATECONTROL_AVBR};
 static const char *const rc_method_text[] =
@@ -255,33 +264,40 @@ static const char *const sout_options[] = {
 };
 
 // Frame pool for QuickSync video encoder with Intel Media SDK's format frames.
-typedef struct qsv_frame_pool_t
+typedef struct _QSVFrame
 {
-    mfxFrameInfo          fmt;            // IntelMediaSDK format info.
-    mfxFrameSurface1      *frames;        // An allocated array of 'size' frames.
-    size_t                size;           // The number of frame in the pool.
-} qsv_frame_pool_t;
+    struct _QSVFrame  *next;
+    picture_t         *pic;
+    mfxFrameSurface1  surface;
+    mfxEncodeCtrl     enc_ctrl;
+    int               used;
+} QSVFrame;
 
 typedef struct async_task_t
 {
+    fifo_item_t      fifo;
     mfxBitstream     bs;                  // Intel's bitstream structure.
-    mfxSyncPoint     syncp;               // Async Task Sync Point.
+    mfxSyncPoint     *syncp;              // Async Task Sync Point.
     block_t          *block;              // VLC's block structure to be returned by Encode.
 } async_task_t;
 
+TYPED_FIFO(async_task_t, async_task_t)
+
 struct encoder_sys_t
 {
     mfxSession       session;             // Intel Media SDK Session.
     mfxVideoParam    params;              // Encoding parameters.
-    mfxIMPL          impl;                // Actual implementation (hw/sw).
-    qsv_frame_pool_t frames;              // IntelMediaSDK's frame pool.
+    QSVFrame         *work_frames;        // IntelMediaSDK's frame pool.
     uint64_t         dts_warn_counter;    // DTS warning counter for rate-limiting of msg;
-    uint64_t         busy_warn_counter;   // Device Bussy warning counter for rate-limiting of msg;
+    uint64_t         busy_warn_counter;   // Device Busy warning counter for rate-limiting of msg;
     uint64_t         async_depth;         // Number of parallel encoding operations.
     uint64_t         first_task;          // The next sync point to be synchronized.
     async_task_t     *tasks;              // The async encoding tasks.
+    fifo_t           packets;             // FIFO of queued packets
     vlc_tick_t       offset_pts;          // The pts of the first frame, to avoid conversion overflow.
     vlc_tick_t       last_dts;            // The dts of the last frame, to interpolate over buggy dts
+    picture_pool_t   *input_pool;         // pool of pictures to feed the decoder
+                                          //  as it doesn't like constantly changing buffers
 };
 
 static block_t *Encode(encoder_t *, picture_t *);
@@ -297,43 +313,16 @@ static inline uint64_t qsv_mtime_to_timestamp(vlc_tick_t vlc_ts)
     return vlc_ts / UINT64_C(100) * UINT64_C(9);
 }
 
-/*
- * Create a new frame pool with 'size' frames in it. Pools cannot be resized.
- */
-static int qsv_frame_pool_Init(qsv_frame_pool_t *pool,
-                               mfxFrameAllocRequest *request,
-                               uint64_t async_depth)
-{
-    size_t size = request->NumFrameSuggested + async_depth;
-
-    pool->frames = calloc(size, sizeof(mfxFrameSurface1));
-    if (unlikely(!pool->frames))
-        return VLC_ENOMEM;
-
-    pool->size = size;
-    memcpy(&pool->fmt, &request->Info, sizeof(request->Info));
-
-    for (size_t i = 0; i < size; i++) {
-        memcpy(&pool->frames[i].Info, &request->Info, sizeof(request->Info));
-        pool->frames[i].Data.Pitch = QSV_ALIGN(32, request->Info.Width);
-    }
-
-    return VLC_SUCCESS;
-}
-
-/*
- * Destroys a pool frame. Only call this function after a MFXClose
- * call since we doesn't check for Locked frames.
- */
-static void qsv_frame_pool_Destroy(qsv_frame_pool_t *pool)
+static void clear_unused_frames(encoder_sys_t *sys)
 {
-    for (size_t i = 0; i < pool->size; i++) {
-        picture_t *pic = (picture_t *) pool->frames[i].Data.MemId;
-        if (pic)
-            picture_Release(pic);
+    QSVFrame *cur = sys->work_frames;
+    while (cur) {
+        if (cur->used && !cur->surface.Data.Locked) {
+            picture_Release(cur->pic);
+            cur->used = 0;
+        }
+        cur = cur->next;
     }
-
-    free(pool->frames);
 }
 
 /*
@@ -341,40 +330,38 @@ static void qsv_frame_pool_Destroy(qsv_frame_pool_t *pool)
  * necessary associates the new picture with it and return the frame.
  * Returns 0 if there's an error.
  */
-static mfxFrameSurface1 *qsv_frame_pool_Get(encoder_sys_t *sys, picture_t *pic)
+static int get_free_frame(encoder_sys_t *sys, QSVFrame **out)
 {
-    qsv_frame_pool_t *pool = &sys->frames;
-    for (size_t i = 0; i < pool->size; i++) {
-        mfxFrameSurface1 *frame = &pool->frames[i];
-        if (frame->Data.Locked)
-            continue;
-        if (frame->Data.MemId)
-            picture_Release((picture_t *)frame->Data.MemId);
-
-        frame->Data.MemId     = pic;
-        frame->Data.Y         = pic->p[0].p_pixels;
-        frame->Data.U         = pic->p[1].p_pixels;
-        frame->Data.V         = pic->p[1].p_pixels + 1;
-        frame->Data.TimeStamp = qsv_mtime_to_timestamp(pic->date - sys->offset_pts);
-
-        // Specify picture structure at runtime.
-        if (pic->b_progressive)
-            frame->Info.PicStruct = MFX_PICSTRUCT_PROGRESSIVE;
-        else if (pic->b_top_field_first)
-            frame->Info.PicStruct = MFX_PICSTRUCT_FIELD_TFF;
-        else
-            frame->Info.PicStruct = MFX_PICSTRUCT_FIELD_BFF;
+    QSVFrame *frame, **last;
+
+    clear_unused_frames(sys);
 
-        picture_Hold(pic);
+    frame = sys->work_frames;
+    last  = &sys->work_frames;
+    while (frame) {
+        if (!frame->used) {
+            *out = frame;
+            frame->used = 1;
+            return VLC_SUCCESS;
+        }
 
-        return frame;
+        last  = &frame->next;
+        frame = frame->next;
     }
 
-    return NULL;
+    frame = calloc(1,sizeof(QSVFrame));
+    if (unlikely(frame==NULL))
+        return VLC_ENOMEM;
+    *last = frame;
+
+    *out = frame;
+    frame->used = 1;
+
+    return VLC_SUCCESS;
 }
 
 static uint64_t qsv_params_get_value(const char *const *text,
-                                     const int const *list,
+                                     const int *list,
                                      size_t size, char *sel)
 {
     size_t result = 0;
@@ -401,13 +388,41 @@ static int Open(vlc_object_t *this)
     encoder_sys_t *sys = NULL;
 
     mfxStatus sts = MFX_ERR_NONE;
-    mfxFrameAllocRequest alloc_request;
+    mfxFrameAllocRequest alloc_request = { 0 };
+    uint8_t sps_buf[128];
+    uint8_t pps_buf[128];
     mfxExtCodingOptionSPSPPS headers;
-    mfxExtBuffer *extended_params[1] = {(mfxExtBuffer *)&headers};
+    mfxExtCodingOption co = {
+        .Header.BufferId = MFX_EXTBUFF_CODING_OPTION,
+        .Header.BufferSz = sizeof(co),
+        .PicTimingSEI = MFX_CODINGOPTION_ON,
+    };
+#if QSV_HAVE_CO2
+    mfxExtCodingOption2 co2 = {
+        .Header.BufferId = MFX_EXTBUFF_CODING_OPTION2,
+        .Header.BufferSz = sizeof(co2),
+    };
+#endif
+    mfxExtBuffer *init_params[] =
+    {
+        (mfxExtBuffer*)&co,
+#if QSV_HAVE_CO2
+        (mfxExtBuffer*)&co2,
+#endif
+    };
+    mfxExtBuffer *extended_params[] = {
+        (mfxExtBuffer*)&headers,
+        (mfxExtBuffer*)&co,
+#if QSV_HAVE_CO2
+        (mfxExtBuffer*)&co2,
+#endif
+    };
+    mfxVersion    ver = { { 1, 1 } };
+    mfxIMPL       impl;
+    mfxVideoParam param_out = { 0 };
 
     uint8_t *p_extra;
     size_t i_extra;
-    uint8_t nals[128];
 
     if (enc->fmt_out.i_codec != VLC_CODEC_H264 &&
         enc->fmt_out.i_codec != VLC_CODEC_MPGV && !enc->obj.force)
@@ -425,7 +440,7 @@ static int Open(vlc_object_t *this)
         return VLC_ENOMEM;
 
     /* Initialize dispatcher, it will loads the actual SW/HW Implementation */
-    sts = MFXInit(MFX_IMPL_AUTO, 0, &sys->session);
+    sts = MFXInit(MFX_IMPL_AUTO_ANY, &ver, &sys->session);
 
     if (sts != MFX_ERR_NONE) {
         msg_Err(enc, "Unable to find an Intel Media SDK implementation.");
@@ -433,24 +448,19 @@ static int Open(vlc_object_t *this)
         return VLC_EGENERIC;
     }
 
+    enc->p_sys = sys;
+
     config_ChainParse(enc, SOUT_CFG_PREFIX, sout_options, enc->p_cfg);
 
     /* Checking if we are on software and are allowing it */
-    MFXQueryIMPL(sys->session, &sys->impl);
-    if (!var_InheritBool(enc, SOUT_CFG_PREFIX "software") && (sys->impl & MFX_IMPL_SOFTWARE)) {
+    MFXQueryIMPL(sys->session, &impl);
+    if (!var_InheritBool(enc, SOUT_CFG_PREFIX "software") && (impl & MFX_IMPL_SOFTWARE)) {
         msg_Err(enc, "No hardware implementation found and software mode disabled");
-        free(sys);
-        return VLC_EGENERIC;
+        goto error;
     }
 
     msg_Dbg(enc, "Using Intel QuickSync Video %s implementation",
-        sys->impl & MFX_IMPL_HARDWARE ? "hardware" : "software");
-
-    /* Vlc module configuration */
-    enc->p_sys                         = sys;
-    enc->fmt_in.i_codec                = VLC_CODEC_NV12; // Intel Media SDK requirement
-    enc->fmt_in.video.i_chroma         = VLC_CODEC_NV12;
-    enc->fmt_in.video.i_bits_per_pixel = 12;
+        impl & MFX_IMPL_HARDWARE ? "hardware" : "software");
 
     /* Input picture format description */
     sys->params.mfx.FrameInfo.FrameRateExtN = enc->fmt_in.video.i_frame_rate;
@@ -461,11 +471,16 @@ static int Open(vlc_object_t *this)
     sys->params.mfx.FrameInfo.Height        = QSV_ALIGN(32, enc->fmt_in.video.i_height);
     sys->params.mfx.FrameInfo.CropW         = enc->fmt_in.video.i_visible_width;
     sys->params.mfx.FrameInfo.CropH         = enc->fmt_in.video.i_visible_height;
-    sys->params.mfx.FrameInfo.PicStruct     = MFX_PICSTRUCT_UNKNOWN;
+    sys->params.mfx.FrameInfo.PicStruct     = MFX_PICSTRUCT_PROGRESSIVE;
+    sys->params.mfx.FrameInfo.AspectRatioH  = enc->fmt_in.video.i_sar_num;
+    sys->params.mfx.FrameInfo.AspectRatioW  = enc->fmt_in.video.i_sar_den;
+    sys->params.mfx.FrameInfo.BitDepthChroma = 8; /* for VLC_CODEC_NV12 */
+    sys->params.mfx.FrameInfo.BitDepthLuma   = 8; /* for VLC_CODEC_NV12 */
 
     /* Parsing options common to all RC methods and codecs */
     sys->params.IOPattern       = MFX_IOPATTERN_IN_SYSTEM_MEMORY;
     sys->params.AsyncDepth      = var_InheritInteger(enc, SOUT_CFG_PREFIX "async-depth");
+    sys->params.mfx.GopOptFlag  = 1; /* TODO */
     sys->params.mfx.GopPicSize  = var_InheritInteger(enc, SOUT_CFG_PREFIX "gop-size");
     sys->params.mfx.GopRefDist  = var_InheritInteger(enc, SOUT_CFG_PREFIX "gop-refdist");
     sys->params.mfx.IdrInterval = var_InheritInteger(enc, SOUT_CFG_PREFIX "idr-interval");
@@ -497,6 +512,7 @@ static int Open(vlc_object_t *this)
         msg_Dbg(enc, "Encoder in MPEG2 mode, with profile %d and level %d",
             sys->params.mfx.CodecProfile, sys->params.mfx.CodecLevel);
     }
+    param_out.mfx.CodecId = sys->params.mfx.CodecId;
 
     char *psz_rc = var_InheritString(enc, SOUT_CFG_PREFIX "rc-method");
     msg_Dbg(enc, "Encoder using '%s' Rate Control method", psz_rc );
@@ -524,6 +540,51 @@ static int Open(vlc_object_t *this)
             sys->params.mfx.MaxKbps = var_InheritInteger(enc, SOUT_CFG_PREFIX "bitrate-max");
     }
 
+    sts = MFXVideoENCODE_Query(sys->session, &sys->params, &param_out);
+    if ( sts < MFX_ERR_NONE )
+    {
+        msg_Err(enc, "Unsupported encoding parameters (%d)", sts);
+        goto error;
+    }
+
+    if ( sys->params.mfx.RateControlMethod != param_out.mfx.RateControlMethod )
+    {
+        msg_Err(enc, "Unsupported control method %d got %d", sys->params.mfx.RateControlMethod, param_out.mfx.RateControlMethod);
+        goto error;
+    }
+
+    if (MFXVideoENCODE_Query(sys->session, &sys->params, &sys->params) < 0)
+    {
+        msg_Err(enc, "Error querying encoder params");
+        goto error;
+    }
+
+    /* Request number of surface needed and creating frame pool */
+    if (MFXVideoENCODE_QueryIOSurf(sys->session, &sys->params, &alloc_request)!= MFX_ERR_NONE)
+    {
+        msg_Err(enc, "Failed to query for allocation");
+        goto error;
+    }
+
+    enc->fmt_in.video.i_chroma = VLC_CODEC_NV12;
+    video_format_t pool_fmt = enc->fmt_in.video;
+    pool_fmt.i_width  = sys->params.mfx.FrameInfo.Width;
+    pool_fmt.i_height = sys->params.mfx.FrameInfo.Height;
+    sys->input_pool = picture_pool_NewFromFormat( &pool_fmt, 18 );
+    if (sys->input_pool == NULL)
+    {
+        msg_Err(enc, "Failed to create the internal pool");
+        goto error;
+    }
+
+    sys->params.ExtParam    = (mfxExtBuffer**)&init_params;
+    sys->params.NumExtParam =
+#if QSV_HAVE_CO2
+            2;
+#else
+            1;
+#endif
+
     /* Initializing MFX_Encoder */
     sts = MFXVideoENCODE_Init(sys->session, &sys->params);
     if (sts == MFX_ERR_NONE)
@@ -537,18 +598,21 @@ static int Open(vlc_object_t *this)
 
     /* Querying PPS/SPS Headers, BufferSizeInKB, ... */
     memset(&headers, 0, sizeof(headers));
-    memset(&nals, 0, sizeof(nals));
     headers.Header.BufferId = MFX_EXTBUFF_CODING_OPTION_SPSPPS;
     headers.Header.BufferSz = sizeof(headers);
-    headers.SPSBufSize      = headers.PPSBufSize = 64;
-    headers.SPSBuffer       = nals;
-    headers.PPSBuffer       = nals + 64;
+    headers.PPSBufSize      = sizeof(pps_buf);
+    headers.SPSBufSize      = sizeof(sps_buf);
+    headers.SPSBuffer       = sps_buf;
+    headers.PPSBuffer       = pps_buf;
     sys->params.ExtParam    = (mfxExtBuffer **)&extended_params;
-    sys->params.NumExtParam = 1;
+    sys->params.NumExtParam =
+#if QSV_HAVE_CO2
+            3;
+#else
+            2;
+#endif
 
     MFXVideoENCODE_GetVideoParam(sys->session, &sys->params);
-    sys->params.NumExtParam = 0;
-    sys->params.ExtParam = NULL;
 
     i_extra = headers.SPSBufSize + headers.PPSBufSize;
     p_extra = malloc(i_extra);
@@ -562,16 +626,13 @@ static int Open(vlc_object_t *this)
     enc->fmt_out.i_extra = i_extra;
 
     sys->async_depth = sys->params.AsyncDepth;
-    sys->tasks = calloc(sys->async_depth, sizeof(async_task_t));
-    if (unlikely(!sys->tasks))
-        goto nomem;
+    async_task_t_fifo_Init(&sys->packets);
 
-    /* Request number of surface needed and creating frame pool */
-    if (MFXVideoENCODE_QueryIOSurf(sys->session, &sys->params, &alloc_request)!= MFX_ERR_NONE)
-        goto error;
-    if (qsv_frame_pool_Init(&sys->frames, &alloc_request, sys->async_depth) != VLC_SUCCESS)
-        goto nomem;
-    msg_Dbg(enc, "Requested %d surfaces for work", alloc_request.NumFrameSuggested);
+    /* Vlc module configuration */
+    enc->fmt_in.i_codec                = VLC_CODEC_NV12; // Intel Media SDK requirement
+    enc->fmt_in.video.i_bits_per_pixel = 12;
+    enc->fmt_in.video.i_width          = sys->params.mfx.FrameInfo.Width;
+    enc->fmt_in.video.i_height         = sys->params.mfx.FrameInfo.Height;
 
     enc->pf_encode_video = Encode;
 
@@ -579,9 +640,11 @@ static int Open(vlc_object_t *this)
 
  error:
     Close(this);
+    enc->p_sys = NULL;
     return VLC_EGENERIC;
  nomem:
     Close(this);
+    enc->p_sys = NULL;
     return VLC_ENOMEM;
 }
 
@@ -594,10 +657,9 @@ static void Close(vlc_object_t *this)
     MFXClose(sys->session);
     /* if (enc->fmt_out.p_extra) */
     /*     free(enc->fmt_out.p_extra); */
-    if (sys->frames.size)
-        qsv_frame_pool_Destroy(&sys->frames);
-    if (sys->tasks)
-        free(sys->tasks);
+    async_task_t_fifo_Release(&sys->packets);
+    if (sys->input_pool)
+        picture_pool_Release(sys->input_pool);
     free(sys);
 }
 
@@ -606,7 +668,7 @@ static void Close(vlc_object_t *this)
  */
 static void qsv_set_block_flags(block_t *block, uint16_t frame_type)
 {
-    if ((frame_type & MFX_FRAMETYPE_IDR) || (frame_type & MFX_FRAMETYPE_REF))
+    if (frame_type & MFX_FRAMETYPE_IDR)
         block->i_flags = BLOCK_FLAG_TYPE_I;
     else if ((frame_type & MFX_FRAMETYPE_P) || (frame_type & MFX_FRAMETYPE_I))
         block->i_flags = BLOCK_FLAG_TYPE_P;
@@ -637,11 +699,20 @@ static void qsv_set_block_ts(encoder_t *enc, encoder_sys_t *sys, block_t *block,
 static block_t *qsv_synchronize_block(encoder_t *enc, async_task_t *task)
 {
     encoder_sys_t *sys = enc->p_sys;
+    mfxStatus sts;
 
     /* Synchronize and fill block_t. If the SyncOperation fails we leak :-/ (or we can segfault, ur choice) */
-    if (MFXVideoCORE_SyncOperation(sys->session, task->syncp, QSV_SYNCPOINT_WAIT) != MFX_ERR_NONE) {
-        msg_Err(enc, "SyncOperation failed, outputting garbage data. "
-                "Updating your drivers and/or changing the encoding settings might resolve this");
+    do {
+        sts = MFXVideoCORE_SyncOperation(sys->session, *task->syncp, QSV_SYNCPOINT_WAIT);
+    } while (sts == MFX_WRN_IN_EXECUTION);
+    if (sts != MFX_ERR_NONE) {
+        msg_Err(enc, "SyncOperation failed (%d), outputting garbage data. "
+                "Updating your drivers and/or changing the encoding settings might resolve this", sts);
+        return NULL;
+    }
+    if (task->bs.DataLength == 0)
+    {
+        msg_Dbg(enc, "Empty encoded block");
         return NULL;
     }
     block_t *block = task->block;
@@ -652,8 +723,8 @@ static block_t *qsv_synchronize_block(encoder_t *enc, async_task_t *task)
     qsv_set_block_flags(block, task->bs.FrameType);
 
     /* msg_Dbg(enc, "block->i_pts = %lld, block->i_dts = %lld", block->i_pts, block->i_dts); */
-    /* msg_Dbg(enc, "FrameType = %#.4x, TimeStamp (pts) = %lld, DecodeTimeStamp = %lld", */
-    /*         task->bs.FrameType, task->bs.TimeStamp, task->bs.DecodeTimeStamp); */
+    /* msg_Dbg(enc, "FrameType = %#.4x, TimeStamp = %lld (pts %lld), DecodeTimeStamp = %lld syncp=0x%x",*/
+    /*         task->bs.FrameType, task->bs.TimeStamp, block->i_pts, task->bs.DecodeTimeStamp, *task->syncp); */
 
     /* Copied from x264.c: This isn't really valid for streams with B-frames */
     block->i_length = CLOCK_FREQ *
@@ -664,15 +735,64 @@ static block_t *qsv_synchronize_block(encoder_t *enc, async_task_t *task)
     if (task->bs.DecodeTimeStamp < -10000)
         block->i_dts = sys->last_dts + block->i_length;
     sys->last_dts = block->i_dts;
+
+    task->bs.DataLength = task->bs.DataOffset = 0;
     return block;
 }
 
-static void qsv_queue_encode_picture(encoder_t *enc, async_task_t *task,
-                                     picture_t *pic)
+static int submit_frame(encoder_t *enc, picture_t *pic, QSVFrame **new_frame)
 {
     encoder_sys_t *sys = enc->p_sys;
-    mfxStatus sts;
-    mfxFrameSurface1 *frame = NULL;
+    QSVFrame *qf = NULL;
+    int ret = get_free_frame(sys, &qf);
+    if (ret != VLC_SUCCESS) {
+        msg_Warn(enc, "Unable to find an unlocked surface in the pool");
+        return ret;
+    }
+
+    qf->pic = picture_pool_Get( sys->input_pool );
+    if (unlikely(!qf->pic))
+    {
+        msg_Warn(enc, "Unable to find an unlocked surface in the pool");
+        qf->used = 0;
+        return ret;
+    }
+    picture_Copy( qf->pic, pic );
+
+    assert(qf->pic->p[0].p_pixels + (qf->pic->p[0].i_pitch * qf->pic->p[0].i_lines) == qf->pic->p[1].p_pixels);
+
+    qf->surface.Info = sys->params.mfx.FrameInfo;
+
+    // Specify picture structure at runtime.
+    if (pic->b_progressive)
+        qf->surface.Info.PicStruct = MFX_PICSTRUCT_PROGRESSIVE;
+    else if (pic->b_top_field_first)
+        qf->surface.Info.PicStruct = MFX_PICSTRUCT_FIELD_TFF;
+    else
+        qf->surface.Info.PicStruct = MFX_PICSTRUCT_FIELD_BFF;
+
+    //qf->surface.Data.Pitch = QSV_ALIGN(16, qf->surface.Info.Width);
+
+    qf->surface.Data.PitchLow  = qf->pic->p[0].i_pitch;
+    qf->surface.Data.Y         = qf->pic->p[0].p_pixels;
+    qf->surface.Data.UV        = qf->pic->p[1].p_pixels;
+
+    qf->surface.Data.TimeStamp = qsv_mtime_to_timestamp(pic->date - sys->offset_pts);
+
+    *new_frame = qf;
+
+    return VLC_SUCCESS;
+}
+
+static async_task_t *encode_frame(encoder_t *enc, picture_t *pic)
+{
+    encoder_sys_t *sys = enc->p_sys;
+    mfxStatus sts = MFX_ERR_MEMORY_ALLOC;
+    QSVFrame *qsv_frame = NULL;
+    mfxFrameSurface1 *surf = NULL;
+    async_task_t *task = calloc(1, sizeof(*task));
+    if (unlikely(task == NULL))
+        goto done;
 
     if (pic) {
         /* To avoid qsv -> vlc timestamp conversion overflow, we use timestamp relative
@@ -681,29 +801,39 @@ static void qsv_queue_encode_picture(encoder_t *enc, async_task_t *task,
         if (!sys->offset_pts) // First frame
             sys->offset_pts = pic->date;
 
-        frame = qsv_frame_pool_Get(sys, pic);
-        if (!frame) {
+        if (submit_frame(enc, pic, &qsv_frame) != VLC_SUCCESS)
+        {
             msg_Warn(enc, "Unable to find an unlocked surface in the pool");
-            return;
+            goto done;
         }
     }
 
+    if (!(task->syncp = calloc(1, sizeof(*task->syncp)))) {
+        msg_Err(enc, "Unable to allocate syncpoint for encoder output");
+        goto done;
+    }
+
     /* Allocate block_t and prepare mfxBitstream for encoder */
     if (!(task->block = block_Alloc(sys->params.mfx.BufferSizeInKB * 1000))) {
         msg_Err(enc, "Unable to allocate block for encoder output");
-        return;
+        goto done;
     }
     memset(&task->bs, 0, sizeof(task->bs));
-    task->bs.MaxLength = sys->params.mfx.BufferSizeInKB * 1000;
+    task->bs.MaxLength = task->block->i_buffer;
     task->bs.Data = task->block->p_buffer;
 
+    if (qsv_frame) {
+        surf = &qsv_frame->surface;
+    }
+
     for (;;) {
-        sts = MFXVideoENCODE_EncodeFrameAsync(sys->session, 0, frame, &task->bs, &task->syncp);
-        if (sts != MFX_WRN_DEVICE_BUSY)
+        sts = MFXVideoENCODE_EncodeFrameAsync(sys->session, 0, surf, &task->bs, task->syncp);
+        if (sts != MFX_WRN_DEVICE_BUSY && sts != MFX_WRN_IN_EXECUTION)
             break;
         if (sys->busy_warn_counter++ % 16 == 0)
-            msg_Dbg(enc, "Device is busy, let's wait and retry");
-        msleep(QSV_BUSYWAIT_TIME);
+            msg_Dbg(enc, "Device is busy, let's wait and retry %d", sts);
+        if (sts == MFX_WRN_DEVICE_BUSY)
+            msleep(QSV_BUSYWAIT_TIME);
     }
 
     // msg_Dbg(enc, "Encode async status: %d, Syncpoint = %tx", sts, (ptrdiff_t)task->syncp);
@@ -717,6 +847,15 @@ static void qsv_queue_encode_picture(encoder_t *enc, async_task_t *task,
         msg_Err(enc, "Encoder not ready or error (%d), trying a reset...", sts);
         MFXVideoENCODE_Reset(sys->session, &sys->params);
     }
+
+done:
+    if (sts < MFX_ERR_NONE || (task != NULL && !task->syncp)) {
+        if (task->block != NULL)
+            block_Release(task->block);
+        free(task);
+        task = NULL;
+    }
+    return task;
 }
 
 /*
@@ -730,32 +869,25 @@ static block_t *Encode(encoder_t *this, picture_t *pic)
 {
     encoder_t     *enc = (encoder_t *)this;
     encoder_sys_t *sys = enc->p_sys;
-    async_task_t  *task = NULL;
+    async_task_t     *task;
     block_t       *block = NULL;
 
-    if (pic) {
-        /* Finds an available SyncPoint */
-        for (size_t i = 0; i < sys->async_depth; i++)
-            if ((sys->tasks + (i + sys->first_task) % sys->async_depth)->syncp == 0) {
-                task = sys->tasks + (i + sys->first_task) % sys->async_depth;
-                break;
-            }
-    } else
-        /* If !pic, we are emptying encoder and tasks, so we force the SyncOperation */
-        msg_Dbg(enc, "Emptying encoder");
-
-    /* There is no available task, we need to synchronize */
-    if (!task) {
-        task = sys->tasks + sys->first_task;
+    if (likely(pic != NULL))
+    {
+        task = encode_frame( enc, pic );
+        if (likely(task != NULL))
+            async_task_t_fifo_Put(&sys->packets, task);
+    }
 
+    if ( async_task_t_fifo_GetCount(&sys->packets) == (sys->async_depth + 1) ||
+         (!pic && async_task_t_fifo_GetCount(&sys->packets)))
+    {
+        assert(async_task_t_fifo_Show(&sys->packets)->syncp != 0);
+        async_task_t *task = async_task_t_fifo_Get(&sys->packets);
         block = qsv_synchronize_block( enc, task );
-
-        /* Reset the task now it has been synchronized and advances first_task pointer */
-        task->syncp = 0;
-        sys->first_task = (sys->first_task + 1) % sys->async_depth;
+        free(task->syncp);
+        free(task);
     }
 
-    qsv_queue_encode_picture( enc, task, pic );
-
     return block;
 }
-- 
2.20.1

